// <auto-generated />
using System;
using BPMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BPMS.Infrastructure.Migrations
{
    [DbContext(typeof(BpmsDbContext))]
    [Migration("20230325074457_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BPMS.Domain.Entities.AllFlowsWithDelayLog", b =>
                {
                    b.Property<Guid>("FlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("DelayHour")
                        .HasColumnType("int");

                    b.Property<int>("DelayHourToThisStep")
                        .HasColumnType("int");

                    b.Property<string>("FlowStaff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FlowStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FlowStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PredictedTime")
                        .HasColumnType("int");

                    b.Property<int>("PredictedTimeAllToThisStep")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RequestNo")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestStaff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimeTodo")
                        .HasColumnType("int");

                    b.Property<int>("TimeTodoAllToThisStep")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowDetailTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FlowId");

                    b.ToTable("AllFlowsWithDelayLogs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Assingnment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseTypeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResponseTypeGroupId");

                    b.HasIndex("StaffId");

                    b.ToTable("Assingnments");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.AverageRequestProcessingTimeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvgTimeDone")
                        .HasColumnType("int");

                    b.Property<int?>("AvgTimeToDo")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<int?>("Min")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("UpdatedTime")
                        .HasColumnType("time");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowId")
                        .IsUnique();

                    b.ToTable("AverageRequestProcessingTimeLogs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Chart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChartLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhpId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChartLevelId");

                    b.HasIndex("ParentId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Avtive")
                        .HasColumnType("bit");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Dsr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FromDsr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NationalNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrganizationPost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dsr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EconomicCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("RegisterDate")
                        .HasColumnType("bigint");

                    b.Property<string>("RegisterTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.DocumentsAccessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemove")
                        .HasColumnType("bit");

                    b.Property<Guid>("FormClassificationAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInProcess")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DocumentsAccessTypes");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.DynamicChart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataSetting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WidgetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ReportId");

                    b.HasIndex("WidgetTypeId");

                    b.ToTable("DynamicCharts");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.EmailConfigs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortNumber")
                        .HasColumnType("int");

                    b.Property<string>("SmtpServerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SslRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailConfigs", (string)null);
                });

            modelBuilder.Entity("BPMS.Domain.Entities.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SentDate")
                        .HasColumnType("int");

                    b.Property<bool>("SentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Time")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.EmployementCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dsr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestIntention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("EmployementCertificates", (string)null);
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Exceptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Number"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exceptions", (string)null);
                });

            modelBuilder.Entity("BPMS.Domain.Entities.ExternalApi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int>("AuthorizationType")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LookUpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LookUpId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseStructute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseInGrid")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LookUpId");

                    b.HasIndex("LookUpId1");

                    b.ToTable("ExternalApis");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Flow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CallActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConfermentAuthorityStaffId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DelayDate")
                        .HasColumnType("int");

                    b.Property<string>("DelayTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Dsr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DynamicWaitingTime")
                        .HasColumnType("int");

                    b.Property<Guid>("FlowStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBalloon")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<long>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Order"));

                    b.Property<Guid?>("OrganizationPostTitleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreviousFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreviousWorkFlowDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ResponseDate")
                        .HasColumnType("int");

                    b.Property<string>("ResponseTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Value")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("WorkFlowDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConfermentAuthorityStaffId");

                    b.HasIndex("FlowStatusId");

                    b.HasIndex("OrganizationPostTitleId");

                    b.HasIndex("PreviousFlowId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StaffId");

                    b.HasIndex("WorkFlowDetailId");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FlowEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GatewayEventBase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkFlowEsbId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.HasIndex("WorkFlowEsbId");

                    b.ToTable("FlowEvents");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormClassification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConfidentialLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedDate")
                        .HasColumnType("int");

                    b.Property<string>("Dsr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EditDate")
                        .HasColumnType("int");

                    b.Property<string>("EditNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FormNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("FormStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImplementedInBpms")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RecordEditDate")
                        .HasColumnType("int");

                    b.Property<int>("RegisterDate")
                        .HasColumnType("int");

                    b.Property<Guid>("StandardTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkFlowLookupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("ConfidentialLevelId");

                    b.HasIndex("FormStatusId");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("StandardTypeId");

                    b.HasIndex("WorkFlowLookupId");

                    b.ToTable("FormClassifications");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormClassificationAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormClassificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormClassificationId");

                    b.ToTable("FormClassificationAccesses", (string)null);
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormClassificationCreators", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormClassificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorTypeId");

                    b.HasIndex("FormClassificationId");

                    b.HasIndex("StaffId");

                    b.ToTable("FormClassificationCreators");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormClassificationRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondaryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FormClassificationRelations");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormLookUp2N", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormLookUp2N");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Holyday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<string>("Dsr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HolydayTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HolydayTypeId");

                    b.ToTable("Holydays");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.LookUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aux")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Aux2")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Type")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code", "Type" }, "XI_Code_Type")
                        .IsUnique()
                        .HasFilter("[Type] IS NOT NULL");

                    b.ToTable("LookUps");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.OrganiztionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganiztionPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhpId")
                        .HasColumnType("int");

                    b.Property<bool>("Priority")
                        .HasColumnType("bit");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.HasIndex("OrganiztionPostId");

                    b.HasIndex("StaffId");

                    b.ToTable("OrganiztionInfoes", (string)null);
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Expersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PrintFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterDate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IgnoreOrgInfChange")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizationPostTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegisterDate")
                        .HasColumnType("int");

                    b.Property<string>("RegisterTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<long>("RequestNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RequestNo"));

                    b.Property<Guid>("RequestStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Value")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationPostTitleId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("StaffId");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dsr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "RoleId", "UserId" }, "IX_RoleId_UserId")
                        .IsUnique();

                    b.ToTable("RoleAccesses");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Controller")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Controller", "Action", "RoleId" }, "IX_Controller_Action_RoleId")
                        .IsUnique()
                        .HasFilter("[Controller] IS NOT NULL AND [Action] IS NOT NULL");

                    b.ToTable("RoleActions");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleMapChart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.HasIndex(new[] { "RoleId", "ChartId" }, "IX_RoleId_ChartId")
                        .IsUnique();

                    b.ToTable("RoleMapCharts");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleMapPostTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostTitleId");

                    b.HasIndex(new[] { "RoleId", "PostTitleId" }, "IX_RoleId_LookupId")
                        .IsUnique();

                    b.ToTable("RoleMapPostTitles");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleMapPostType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostTypeId");

                    b.HasIndex(new[] { "RoleId", "PostTypeId" }, "IX_RoleId_LookupId")
                        .IsUnique();

                    b.ToTable("RoleMapPostTypes");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("DailyInterval")
                        .HasColumnType("tinyint");

                    b.Property<int>("EndDate")
                        .HasColumnType("int");

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<string>("HourlyInterval")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRunExpireTrigger")
                        .HasColumnType("bit");

                    b.Property<bool>("MonDay")
                        .HasColumnType("bit");

                    b.Property<int>("RegisterDate")
                        .HasColumnType("int");

                    b.Property<string>("RunTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool>("SaturDay")
                        .HasColumnType("bit");

                    b.Property<int>("StartDate")
                        .HasColumnType("int");

                    b.Property<bool>("SunDay")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ThursDay")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TuesDay")
                        .HasColumnType("bit");

                    b.Property<bool>("WednesDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.ScheduleLifeTimeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Elapsed")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ScheduleLifeTimeLogs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.ScheduleLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ScheduleLogs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.ServiceTaskLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedDate")
                        .HasColumnType("int");

                    b.Property<string>("CreatedTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalApiDataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTaskObjName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkFlowDetailTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkFlowTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkFlowVersion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTaskLogs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.SmsLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SentDate")
                        .HasColumnType("int");

                    b.Property<bool>("SentStatus")
                        .HasColumnType("bit");

                    b.Property<int>("SmsSendType")
                        .HasColumnType("int");

                    b.Property<string>("SmsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("SmsLogs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.SmsProviderConfige", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GsmPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GsmPortRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GsmPortReadTimeout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GsmPortWriteTimeout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmsSendType")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmsProviderConfiges");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AgreementEndDate")
                        .HasColumnType("int");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmploymentDate")
                        .HasColumnType("int");

                    b.Property<Guid>("EngTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalPhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PersonalCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("EngTypeId");

                    b.HasIndex("PersonalCode")
                        .IsUnique();

                    b.HasIndex("StaffTypeId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.StartTimerEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpireDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasExpireDate")
                        .HasColumnType("bit");

                    b.Property<int?>("IntervalHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsSequential")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowId")
                        .IsUnique();

                    b.ToTable("StartTimerEvents");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.SystemSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.ThirdParty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpireDate")
                        .HasColumnType("int");

                    b.Property<string>("IPAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PasswordExpires")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ThirdParties");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.UsefulLinks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExternalLink")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsefulLinks");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoogleAuthKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LDAPDomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LDAPUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SerialNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoStepVerification")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoStepVerificationByEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoStepVerificationByGoogleAuthenticator")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.UserLoginOut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LoginOutTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LoginOutTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginOuts");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("SettingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SettingTypeId");

                    b.HasIndex(new[] { "UserId", "SettingTypeId" }, "XI_User_SettingType")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowBoundary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoundaryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkflowDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowDetailId");

                    b.ToTable("WorkFlowBoundaries");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowConfermentAuthority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegisterDate")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("WorkFlowConfermentAuthorities", (string)null);
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowConfermentAuthorityDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConfermentAuthorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FromDate")
                        .HasColumnType("int");

                    b.Property<bool>("OnlyOwnRequest")
                        .HasColumnType("bit");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ToDate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfermentAuthorityId");

                    b.HasIndex("StaffId");

                    b.ToTable("WorkFlowConfermentAuthorityDetails");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Act")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("AdHocWorkflowDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BusinessAcceptor")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessAcceptorMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CallProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dsr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditableFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExiteMethod")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExternalApiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasSaveableForm")
                        .HasColumnType("bit");

                    b.Property<string>("HiddenFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdHoc")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManualTask")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiConfirmReject")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrLogic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScriptTask")
                        .HasColumnType("bit");

                    b.Property<bool>("IsServiceTask")
                        .HasColumnType("bit");

                    b.Property<bool>("NoReject")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrganizationPostTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationPostTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrintFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequesterAccept")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ResponseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScriptTaskMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SelectAcceptor")
                        .HasColumnType("bit");

                    b.Property<bool>("SelectAllPostPattern")
                        .HasColumnType("bit");

                    b.Property<bool>("SelectFirstPostPattern")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceTaskApiResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Step")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ViewName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("WaithingTImeForAct")
                        .HasColumnType("int");

                    b.Property<int?>("WaitingTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkFlowFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkflowDetailPatternId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExternalApiId");

                    b.HasIndex("OrganizationPostTitleId");

                    b.HasIndex("OrganizationPostTypeId");

                    b.HasIndex("ResponseGroupId");

                    b.HasIndex("StaffId");

                    b.HasIndex("WorkFlowFormId");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex("WorkflowDetailPatternId");

                    b.ToTable("WorkFlowDetails");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("AdditionalCssStyleCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Jquery")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ModifideDate")
                        .HasColumnType("int");

                    b.Property<string>("ModifideTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrginalVersion")
                        .HasColumnType("int");

                    b.Property<string>("PName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterDate")
                        .HasColumnType("int");

                    b.Property<string>("RegisterTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("SecondaryVersion")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("StaffId");

                    b.ToTable("WorkFlowForms");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowFormList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkFlowFormLists", (string)null);
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalcCriterionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Crisis")
                        .HasColumnType("int");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlowstatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegisterDate")
                        .HasColumnType("int");

                    b.Property<string>("RegisterTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("RequestTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Warning")
                        .HasColumnType("int");

                    b.Property<Guid?>("WidgetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CalcCriterionId");

                    b.HasIndex("DurationId");

                    b.HasIndex("FlowstatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("WidgetTypeId");

                    b.ToTable("WorkFlowIndicators");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowNextStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoundaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Esb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FromWfdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gateway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ToWfdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromWfdId");

                    b.HasIndex("ToWfdId");

                    b.ToTable("WorkFlowNextSteps");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Dsr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlowTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifideDate")
                        .HasColumnType("int");

                    b.Property<string>("ModifideTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrginalVersion")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterDate")
                        .HasColumnType("int");

                    b.Property<string>("RegisterTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("RemoteId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestGroupTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SecondaryVersion")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlowTypeId");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("RequestGroupTypeId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubProcessId");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkflowDetailPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkflowDetailPatterns");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkflowDetailPatternItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("LookupOrganizationPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkflowDetailPatternId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LookupOrganizationPostId");

                    b.HasIndex("WorkflowDetailPatternId");

                    b.ToTable("WorkflowDetailPatternItems");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkflowEsb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkflowNextStepId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowNextStepId");

                    b.ToTable("WorkflowEsbs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Assingnment", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "ResponseTypeGroup")
                        .WithMany("Assingnments")
                        .HasForeignKey("ResponseTypeGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("Assingnments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ResponseTypeGroup");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Chart", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "ChartLevel")
                        .WithMany("Charts")
                        .HasForeignKey("ChartLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Chart", "ChartParent")
                        .WithMany("ChartChild")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ChartLevel");

                    b.Navigation("ChartParent");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.DynamicChart", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Staff", "Creator")
                        .WithMany("DynamicCharts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Report", "Report")
                        .WithMany("DynamicCharts")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "WidgetType")
                        .WithMany("DynamicChartsWidgetType")
                        .HasForeignKey("WidgetTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Report");

                    b.Navigation("WidgetType");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.EmployementCertificate", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Request", "Requests")
                        .WithMany("EmpCertificates")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.ExternalApi", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", null)
                        .WithMany("ExternalApiActions")
                        .HasForeignKey("LookUpId");

                    b.HasOne("BPMS.Domain.Entities.LookUp", null)
                        .WithMany("ExternalApiContentTypes")
                        .HasForeignKey("LookUpId1");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Flow", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Staff", "ConfermentAuthorityStaff")
                        .WithMany("ConfermentAuthorityFlow")
                        .HasForeignKey("ConfermentAuthorityStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "LookUpFlowStatus")
                        .WithMany("FlowsStatus")
                        .HasForeignKey("FlowStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "OrganizationPostTitle")
                        .WithMany("FlowsOrganizationPostTitle")
                        .HasForeignKey("OrganizationPostTitleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Flow", "PreviousFlow")
                        .WithMany()
                        .HasForeignKey("PreviousFlowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.Request", "Request")
                        .WithMany("Flows")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("FlowStaff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.WorkFlowDetail", "WorkFlowDetail")
                        .WithMany("Flows")
                        .HasForeignKey("WorkFlowDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConfermentAuthorityStaff");

                    b.Navigation("LookUpFlowStatus");

                    b.Navigation("OrganizationPostTitle");

                    b.Navigation("PreviousFlow");

                    b.Navigation("Request");

                    b.Navigation("Staff");

                    b.Navigation("WorkFlowDetail");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FlowEvent", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Flow", "Flow")
                        .WithMany("FlowEvents")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.WorkflowEsb", "WorkflowEsb")
                        .WithMany("FlowEvents")
                        .HasForeignKey("WorkFlowEsbId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("WorkflowEsb");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormClassification", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "AccessType")
                        .WithMany("FormClassification_AccessType")
                        .HasForeignKey("AccessTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "ConfidentialLevel")
                        .WithMany("FormClassification_ConfidentialLevel")
                        .HasForeignKey("ConfidentialLevelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.LookUp", "FormStatus")
                        .WithMany("FormClassification_FormStatus")
                        .HasForeignKey("FormStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "FormType")
                        .WithMany("FormClassification_FormType")
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "StandardType")
                        .WithMany("FormClassification_StandardType")
                        .HasForeignKey("StandardTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "WorkFlowLookup")
                        .WithMany("FormClassification_WorkFlowLookup")
                        .HasForeignKey("WorkFlowLookupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccessType");

                    b.Navigation("ConfidentialLevel");

                    b.Navigation("FormStatus");

                    b.Navigation("FormType");

                    b.Navigation("StandardType");

                    b.Navigation("WorkFlowLookup");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormClassificationAccess", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.FormClassification", "FormClassification")
                        .WithMany("FormClassificationAccess")
                        .HasForeignKey("FormClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormClassification");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormClassificationCreators", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "CreatorType")
                        .WithMany("FormClassificationCreators_CreatorType")
                        .HasForeignKey("CreatorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.FormClassification", "FormClassification")
                        .WithMany("FormClassificationCreators")
                        .HasForeignKey("FormClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("FormClassificationCreators_Staff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorType");

                    b.Navigation("FormClassification");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Holyday", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "HolydayType")
                        .WithMany("HolydayTypes")
                        .HasForeignKey("HolydayTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HolydayType");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.OrganiztionInfo", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Chart", "Chart")
                        .WithMany("OrganiztionInfos")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "OrganiztionPost")
                        .WithMany("OrganiztionInfos")
                        .HasForeignKey("OrganiztionPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("OrganiztionInfos")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chart");

                    b.Navigation("OrganiztionPost");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Report", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Staff", "Creator")
                        .WithMany("Reports")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Reports")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Request", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "OrganizationPostTitle")
                        .WithMany("RequestPostTitles")
                        .HasForeignKey("OrganizationPostTitleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "RequestStatus")
                        .WithMany("RequestStatuses")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("Requests")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Requests")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrganizationPostTitle");

                    b.Navigation("RequestStatus");

                    b.Navigation("Staff");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleAccess", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Role", "Role")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.User", "User")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleAction", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleMapChart", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Chart", "Chart")
                        .WithMany("RoleMapCharts")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Role", "Role")
                        .WithMany("RoleMapCharts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chart");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleMapPostTitle", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "PostTitle")
                        .WithMany("RoleMapPostTitles")
                        .HasForeignKey("PostTitleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Role", "Role")
                        .WithMany("RoleMapPostTitles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PostTitle");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.RoleMapPostType", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "PostType")
                        .WithMany("RoleMapPostTypes")
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Role", "Role")
                        .WithMany("RoleMapPostTypes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PostType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "TaskType")
                        .WithMany("Schedules")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Staff", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "Building")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.LookUp", "EngType")
                        .WithMany("EngType")
                        .HasForeignKey("EngTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "StaffType")
                        .WithMany("StaffType")
                        .HasForeignKey("StaffTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("EngType");

                    b.Navigation("StaffType");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.StartTimerEvent", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Workflow", "Workflow")
                        .WithOne("StartTimerEvent")
                        .HasForeignKey("BPMS.Domain.Entities.StartTimerEvent", "WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.SystemSetting", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.User", "CreatorUser")
                        .WithMany("SystemSettings")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.User", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("Users")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.UserLoginOut", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "UserLoginoutType")
                        .WithMany("UserLoginOuts")
                        .HasForeignKey("LoginOutTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.User", "User")
                        .WithMany("UserLoginOuts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserLoginoutType");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.UserSetting", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "SettingType")
                        .WithMany("UserSettings")
                        .HasForeignKey("SettingTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SettingType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowBoundary", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.WorkFlowDetail", "WorkFlowDetail")
                        .WithMany("WorkFlowBoundaries")
                        .HasForeignKey("WorkflowDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkFlowDetail");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowConfermentAuthority", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "LookUpRequestType")
                        .WithMany("WorkFlowConfermentAuthorities")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("WorkFlowConfermentAuthority")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LookUpRequestType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowConfermentAuthorityDetail", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.WorkFlowConfermentAuthority", "WorkFlowConfermentAuthority")
                        .WithMany("WorkFlowConfermentAuthorityDetail")
                        .HasForeignKey("ConfermentAuthorityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staffs")
                        .WithMany("WorkFlowConfermentAuthorityDetail")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staffs");

                    b.Navigation("WorkFlowConfermentAuthority");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowDetail", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.ExternalApi", "ExternalApi")
                        .WithMany("WorkFlowDetails")
                        .HasForeignKey("ExternalApiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.LookUp", "OrganizationPostTitle")
                        .WithMany("WorkFlowDetailOrganizationPostTitles")
                        .HasForeignKey("OrganizationPostTitleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.LookUp", "OrganizationPostType")
                        .WithMany("WorkFlowDetailOrganizationPostTypes")
                        .HasForeignKey("OrganizationPostTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.LookUp", "ResponseGroup")
                        .WithMany("WorkFlowDetailResponseGroups")
                        .HasForeignKey("ResponseGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("WorkflowDetails")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.WorkFlowForm", "WorkFlowForm")
                        .WithMany("WorkFlowDetails")
                        .HasForeignKey("WorkFlowFormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.Workflow", "WorkFlow")
                        .WithMany("WorkflowDetails")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.WorkflowDetailPattern", "WorkflowDetailPattern")
                        .WithMany("WorkFlowDetails")
                        .HasForeignKey("WorkflowDetailPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalApi");

                    b.Navigation("OrganizationPostTitle");

                    b.Navigation("OrganizationPostType");

                    b.Navigation("ResponseGroup");

                    b.Navigation("Staff");

                    b.Navigation("WorkFlow");

                    b.Navigation("WorkFlowForm");

                    b.Navigation("WorkflowDetailPattern");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowForm", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.Staff", "Modifier")
                        .WithMany("WorkFlowFormsModifire")
                        .HasForeignKey("ModifiedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("WorkFlowForms")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowIndicator", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.WorkFlowDetail", "WorkFlowDetail")
                        .WithMany("WorkFlowIndicators")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "CalcCriterion")
                        .WithMany("WorkFlowIndicatorCalcCriterion")
                        .HasForeignKey("CalcCriterionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "Duration")
                        .WithMany("WorkFlowIndicatorDuration")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "Flowstatus")
                        .WithMany("WorkFlowIndicatorFlowstatus")
                        .HasForeignKey("FlowstatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "RequestType")
                        .WithMany("WorkFlowIndicatorRequestType")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.LookUp", "WidgetType")
                        .WithMany("WorkFlowIndicatorWidgetType")
                        .HasForeignKey("WidgetTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CalcCriterion");

                    b.Navigation("Duration");

                    b.Navigation("Flowstatus");

                    b.Navigation("RequestType");

                    b.Navigation("WidgetType");

                    b.Navigation("WorkFlowDetail");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowNextStep", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.WorkFlowDetail", "NextStepFromWfd")
                        .WithMany("WorkFlowNextStepsFrom")
                        .HasForeignKey("FromWfdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.WorkFlowDetail", "NextStepToWfd")
                        .WithMany("WorkFlowNextStepsTo")
                        .HasForeignKey("ToWfdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NextStepFromWfd");

                    b.Navigation("NextStepToWfd");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Workflow", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "FlowType")
                        .WithMany("WorkflowsFlowType")
                        .HasForeignKey("FlowTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Modifier")
                        .WithMany("WorkflowsModifier")
                        .HasForeignKey("ModifiedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.LookUp", "RequestGroupType")
                        .WithMany("WorkflowsRequestGroupType")
                        .HasForeignKey("RequestGroupTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS.Domain.Entities.LookUp", "RequestType")
                        .WithMany("WorkflowsRequestType")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Staff", "Staff")
                        .WithMany("Workflows")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.Workflow", "SubProcess")
                        .WithMany("SubProcesses")
                        .HasForeignKey("SubProcessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FlowType");

                    b.Navigation("Modifier");

                    b.Navigation("RequestGroupType");

                    b.Navigation("RequestType");

                    b.Navigation("Staff");

                    b.Navigation("SubProcess");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkflowDetailPatternItem", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.LookUp", "LookUpOrganizationPost")
                        .WithMany("WorkflowDetailPatternItems")
                        .HasForeignKey("LookupOrganizationPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS.Domain.Entities.WorkflowDetailPattern", "WorkflowDetailPattern")
                        .WithMany("WorkflowPatternItems")
                        .HasForeignKey("WorkflowDetailPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUpOrganizationPost");

                    b.Navigation("WorkflowDetailPattern");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkflowEsb", b =>
                {
                    b.HasOne("BPMS.Domain.Entities.WorkFlowNextStep", "WorkFlowNextStep")
                        .WithMany("WorkflowEsbs")
                        .HasForeignKey("WorkflowNextStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFlowNextStep");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Chart", b =>
                {
                    b.Navigation("ChartChild");

                    b.Navigation("OrganiztionInfos");

                    b.Navigation("RoleMapCharts");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.ExternalApi", b =>
                {
                    b.Navigation("WorkFlowDetails");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Flow", b =>
                {
                    b.Navigation("FlowEvents");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.FormClassification", b =>
                {
                    b.Navigation("FormClassificationAccess");

                    b.Navigation("FormClassificationCreators");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.LookUp", b =>
                {
                    b.Navigation("Assingnments");

                    b.Navigation("Buildings");

                    b.Navigation("Charts");

                    b.Navigation("DynamicChartsWidgetType");

                    b.Navigation("EngType");

                    b.Navigation("ExternalApiActions");

                    b.Navigation("ExternalApiContentTypes");

                    b.Navigation("FlowsOrganizationPostTitle");

                    b.Navigation("FlowsStatus");

                    b.Navigation("FormClassificationCreators_CreatorType");

                    b.Navigation("FormClassification_AccessType");

                    b.Navigation("FormClassification_ConfidentialLevel");

                    b.Navigation("FormClassification_FormStatus");

                    b.Navigation("FormClassification_FormType");

                    b.Navigation("FormClassification_StandardType");

                    b.Navigation("FormClassification_WorkFlowLookup");

                    b.Navigation("HolydayTypes");

                    b.Navigation("OrganiztionInfos");

                    b.Navigation("RequestPostTitles");

                    b.Navigation("RequestStatuses");

                    b.Navigation("RoleMapPostTitles");

                    b.Navigation("RoleMapPostTypes");

                    b.Navigation("Schedules");

                    b.Navigation("StaffType");

                    b.Navigation("UserLoginOuts");

                    b.Navigation("UserSettings");

                    b.Navigation("WorkFlowConfermentAuthorities");

                    b.Navigation("WorkFlowDetailOrganizationPostTitles");

                    b.Navigation("WorkFlowDetailOrganizationPostTypes");

                    b.Navigation("WorkFlowDetailResponseGroups");

                    b.Navigation("WorkFlowIndicatorCalcCriterion");

                    b.Navigation("WorkFlowIndicatorDuration");

                    b.Navigation("WorkFlowIndicatorFlowstatus");

                    b.Navigation("WorkFlowIndicatorRequestType");

                    b.Navigation("WorkFlowIndicatorWidgetType");

                    b.Navigation("WorkflowDetailPatternItems");

                    b.Navigation("WorkflowsFlowType");

                    b.Navigation("WorkflowsRequestGroupType");

                    b.Navigation("WorkflowsRequestType");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Report", b =>
                {
                    b.Navigation("DynamicCharts");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Request", b =>
                {
                    b.Navigation("EmpCertificates");

                    b.Navigation("Flows");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleAccesses");

                    b.Navigation("RoleClaims");

                    b.Navigation("RoleMapCharts");

                    b.Navigation("RoleMapPostTitles");

                    b.Navigation("RoleMapPostTypes");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Staff", b =>
                {
                    b.Navigation("Assingnments");

                    b.Navigation("ConfermentAuthorityFlow");

                    b.Navigation("DynamicCharts");

                    b.Navigation("FlowStaff");

                    b.Navigation("FormClassificationCreators_Staff");

                    b.Navigation("OrganiztionInfos");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("Users");

                    b.Navigation("WorkFlowConfermentAuthority");

                    b.Navigation("WorkFlowConfermentAuthorityDetail");

                    b.Navigation("WorkFlowForms");

                    b.Navigation("WorkFlowFormsModifire");

                    b.Navigation("WorkflowDetails");

                    b.Navigation("Workflows");

                    b.Navigation("WorkflowsModifier");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.User", b =>
                {
                    b.Navigation("RoleAccesses");

                    b.Navigation("SystemSettings");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLoginOuts");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowConfermentAuthority", b =>
                {
                    b.Navigation("WorkFlowConfermentAuthorityDetail");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowDetail", b =>
                {
                    b.Navigation("Flows");

                    b.Navigation("WorkFlowBoundaries");

                    b.Navigation("WorkFlowIndicators");

                    b.Navigation("WorkFlowNextStepsFrom");

                    b.Navigation("WorkFlowNextStepsTo");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowForm", b =>
                {
                    b.Navigation("WorkFlowDetails");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkFlowNextStep", b =>
                {
                    b.Navigation("WorkflowEsbs");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.Workflow", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("StartTimerEvent");

                    b.Navigation("SubProcesses");

                    b.Navigation("WorkflowDetails");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkflowDetailPattern", b =>
                {
                    b.Navigation("WorkFlowDetails");

                    b.Navigation("WorkflowPatternItems");
                });

            modelBuilder.Entity("BPMS.Domain.Entities.WorkflowEsb", b =>
                {
                    b.Navigation("FlowEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
